#!/c/stuff/bin/node

/**
 * Module dependencies.
 */

var express = require('./node_modules/express');
var logger = require('./node_modules/morgan');
var fs = require('fs');
var app = express();
var _ = require("./node_modules/underscore")

// log requests
app.use(logger('dev'));

// express on its own has no notion
// of a "file". The express.static()
// middleware checks for a file matching
// the `req.path` within the directory
// that you pass it. In this case "GET /js/app.js"
// will look for "./public/js/app.js".



var rootDir = process.argv[2] || ".";

var listenPort = process.argv[3] || 3000;
var template = fs.readFileSync(__dirname + "/node_dir_listing.html", "utf8");

template = _.template(template);


app.use(express.static(rootDir));

app.get("/*/", function(req,res){
	//var contents = fs.readdirSync(rootDir);
	var originalUrl = req.originalUrl.replace(/%20/g, " ");
	var dirInfo = getDirInfo(rootDir + originalUrl);
	var template = fs.readFileSync(__dirname + "/node_dir_listing.html", "utf8");
	//console.log(req);
	template = _.template(template);
	var resp = template({
		dirInfo : dirInfo,
		breadCrumbs : breadCrumbs(originalUrl),
		originalUrl : originalUrl,
		req : req
	});
	//console.log(breadCrumbs(req.originalUrl));
	//console.log(resp);
	res.send(resp);
});

function breadCrumbs (url) {
	var arr = url.split("/");
	arr[0] = {
		name : "/Home",
		link : "/"
	}
	arr.pop()
	for (var i = 1; i < arr.length; i++) {
		arr[i] = {
			name : arr[i],
			link : arr[i-1].link + arr[i] + "/"
		}
	};
	return arr;
}

function getDirInfo (path) {
	//console.log("Path = ", path);
	var contents = fs.readdirSync(path);
	for(var i = 0; i < contents.length; i++){
		var myPath = path + contents[i];
		//console.log(myPath);
		var stats = fs.lstatSync(myPath);
		contents [i] = {
			name : contents[i],
			isDirectory : stats.isDirectory(),
			isFile : stats.isFile()
		};
	}
	return contents;

}
//getDirInfo(rootDir);




// if you wanted to "prefix" you may use
// the mounting feature of Connect, for example
// "GET /static/js/app.js" instead of "GET /js/app.js".
// The mount-path "/static" is simply removed before
// passing control to the express.static() middleware,
// thus it serves the file correctly by ignoring "/static"
//app.use('/static', express.static(__dirname + '/public'));

// if for some reason you want to serve files from
// several directories, you can use express.static()
// multiple times! Here we're passing "./public/css",
// this will allow "GET /style.css" instead of "GET /css/style.css":
//app.use(express.static(__dirname + '/public/css'));

app.listen(listenPort);
console.log("serviing files from", rootDir);
console.log('listening on port', listenPort);
console.log('try:');
console.log('  GET /index.html');
/*console.log('  GET /js/app.js');
console.log('  GET /css/style.css');*/
